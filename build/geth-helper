#!/bin/bash


# ref: https://swarm-guide.readthedocs.io/en/latest/runninganode.html#adding-enodes-manually
#
# Eventually automatic node discovery will be working for swarm nodes. Until
# then I've implemented an array of enode peers and select one from random at
# startup, then add it as a peer using geth's IPC socket.
#
readonly SWARM_ENODE_PEERS=(
    enode://01f7728a1ba53fc263bcfbc2acacc07f08358657070e17536b2845d98d1741ec2af00718c79827dfdbecf5cfcd77965824421508cc9095f378eb2b2156eb79fa@40.68.194.101:30400
    enode://6d9102dd1bebb823944480282c4ba4f066f8dcf15da513268f148890ddea42d7d8afa58c76b08c16b867a58223f2b567178ac87dcfefbd68f0c3cc1990f1e3cf@40.68.194.101:30427
    enode://fca15e2e40788e422b6b5fc718d7041ce395ff65959f859f63b6e4a6fe5886459609e4c5084b1a036ceca43e3eec6a914e56d767b0491cd09f503e7ef5bb87a1@40.68.194.101:30428
    enode://b795d0c872061336fea95a530333ee49ca22ce519f6b9bf1573c31ac0b62c99fe5c8a222dbc83d4ef5dc9e2dfb816fdc89401a36ecfeaeaa7dba1e5285a6e63b@40.68.194.101:30429
    enode://756f582f597843e630b35371fc080d63b027757493f00df91dd799069cfc6cb52ac4d8b1a56b973baf015dd0e9182ea3a172dcbf87eb33189f23522335850e99@40.68.194.101:30430
    enode://d9ccde9c5a90c15a91469b865ffd81f2882dd8731e8cbcd9a493d5cf42d875cc2709ccbc568cf90128896a165ac7a0b00395c4ae1e039f17056510f56a573ef9@40.68.194.101:30431
    enode://65382e9cd2e6ffdf5a8fb2de02d24ac305f1cd014324b290d28a9fba859fcd2ed95b8152a99695a6f2780c342b9815d3c8c2385b6340e96981b10728d987c259@40.68.194.101:30433
    enode://7e09d045cc1522e86f70443861dceb21723fad5e2eda3370a5e14747e7a8a61809fa6c11b37b2ecf1d5aab44976375b6d695fe39d3376ff3a15057296e570d86@40.68.194.101:30434
    enode://bd8c3421167f418ecbb796f843fe340550d2c5e8a3646210c9c9d747bbd34d29398b3e3716ee76aa3f2fc46d325eb685ece0375a858f20b759b40429fbf0d050@40.68.194.101:30435
    enode://8bb7fb70b80f60962c8979b20905898f8f6172ae4f6a715b89712cb7e965bfaab9aa0abd74c7966ad688928604815078c5e9c978d6e57507f45173a03f95b5e0@40.68.194.101:30436
)


function get-swarm-enode {
    local index=$(expr $RANDOM % ${#SWARM_ENODE_PEERS[@]})
    local enode=${SWARM_ENODE_PEERS[$index]}
    echo "$enode"
}

function _ensure-hex {
    local output="$1"
    if [[ ${1:0:2} != 0x ]]; then
        output="0x${1}"
    fi
    echo "$output"
}

function geth-is-running {
    nc -z 127.0.0.1 30303
}

function swarm-is-running {
    nc -z 127.0.0.1 30399
}

function node-is-healthy {
    geth-is-running || swarm-is-running
}

function _wait-until-healthy {
    until node-is-healthy; do
        sleep 2
    done
}

function number-of-accounts {
    if geth-is-running; then
        geth attach --exec "console.log(personal.listAccounts.length)" | head -1 | xargs
    else
        geth account list 2> /dev/null | wc -l | xargs
    fi
}

function unlock-account {
    local account="$1"
    local pass="$2"
    [[ -z $account || -z $pass ]] && exit 1
    geth attach --exec "personal.unlockAccount(\"$account\", \"$pass\")"
}

function get-account-by-index {
    local index="${1:-0}"
    local account
    if geth-is-running; then
        geth attach --exec "console.log(personal.listAccounts[$index])" | head -1 | xargs
    else
        ((index++))
        account=$(geth account list | sed -n "${index}p" | cut -d' ' -f3 | sed 's/{\|}//g')
        [[ -z $account ]] && return 1
        _ensure-hex $account
    fi
}

function unlock-primary-account {
    local pass="${1}"
    _wait-for-geth
    if [[ $(number-of-accounts) != 0 ]]; then
        primary_account=$(get-account-by-index 0)
        unlock-account "$primary_account" "$pass"
    fi
}

function rpc {
    _wait-until-healthy
    geth attach --exec "$@"
}

function start-mining {
    local miner_threads="${1:-$(nproc)}"
    _wait-until-healthy
    geth attach --exec "miner.start($miner_threads)"
}

function get-property {
    local key="$1"
    geth attach --exec "console.log($key)" | head -1 | xargs
}

function stop-mining {
    _wait-until-healthy
    geth attach --exec "miner.stop()"
}

function add-peer {
    local enode="$1"
    geth attach --exec="admin.addPeer(\"$enode\")"
}

function bootstrap-swarm-enode {
    local enode="${SWARM_ENODE_PEER:=$(get-swarm-enode)}"
    [[ ! -z $DEBUG ]] && echo "Adding enode peer: $SWARM_ENODE_PEER"
    add-peer "$enode"
}

function bootstrap-swarm-enode-bg {
    _wait-until-healthy
    bootstrap-swarm-enode
}

function add-peer-bg {
    _wait-until-healthy
    add-peer "$1"
}

function create-default-account {
    local pass="${1:-testtest}"
    geth account new --password <(echo -n "$pass")
}


if [[ ! -z $1 ]]; then
    "$@"
else
    echo "Usage: $(basename $0) {rpc <console-command>|unlock-account|get-account-by-index|unlock-primary-account|start-mining|stop-mining}"
fi
